CREATE TABLE schedule (
  schedule_id INT PRIMARY KEY AUTO_INCREMENT,
  facilityID INT NOT NULL,
  medicare_num INT NOT NULL,
  schedule_date DATE,
  start_time TIME,
  end_time TIME,
  CONSTRAINT fk_facility FOREIGN KEY (facilityID) REFERENCES facility (facilityID),
  CONSTRAINT fk_employee FOREIGN KEY (medicare_num) REFERENCES employee (medicare_num),
  CONSTRAINT unique_schedule UNIQUE (facilityID, medicare_num, schedule_date, start_time),
  CONSTRAINT check_start_time CHECK (start_time < end_time),

CREATE TRIGGER tr_schedule_conflict
BEFORE INSERT ON schedule
FOR EACH ROW
BEGIN
  IF EXISTS (
    SELECT 1 FROM schedule
    WHERE medicare_num = NEW.medicare_num
    AND schedule_date = NEW.schedule_date
    AND (
      (start_time < NEW.start_time AND end_time > NEW.start_time)
      OR (start_time >= NEW.start_time AND start_time < NEW.end_time)
    )
    AND schedule_id != NEW.schedule_id
  ) THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Employee is already scheduled for conflicting time.';
  END IF;
END;

CREATE TRIGGER tr_schedule_duration
BEFORE INSERT ON schedule
FOR EACH ROW
BEGIN
  IF EXISTS (
    SELECT 1 FROM schedule
    WHERE medicare_num = NEW.medicare_num
    AND facilityID = NEW.facilityID
    AND schedule_date = NEW.schedule_date
    AND (
      (start_time <= NEW.start_time AND end_time >= NEW.end_time)
      OR (start_time >= NEW.start_time AND start_time < NEW.end_time AND TIME_TO_SEC(TIMEDIFF(NEW.start_time, end_time)) < 3600)
      OR (start_time < NEW.start_time AND end_time > NEW.start_time AND TIME_TO_SEC(TIMEDIFF(start_time, NEW.end_time)) < 3600)
    )
    AND schedule_id != NEW.schedule_id
  ) THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Employee is already scheduled for another shift on the same day.';
  END IF;
END;

CREATE TRIGGER tr_schedule_infection
BEFORE INSERT ON schedule
FOR EACH ROW
BEGIN
  IF EXISTS (
    SELECT 1 FROM Infections
    WHERE medicare_num = NEW.medicare_num
    AND DATE_ADD(date, INTERVAL 14 DAY) >= NEW.schedule_date
  ) THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Employee is infected with COVID-19 and cannot be scheduled.';
  END IF;
END;

CREATE TRIGGER tr_schedule_vaccination
BEFORE INSERT ON schedule
FOR EACH ROW
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM Vaccines
    WHERE medicare_num = NEW.medicare_num
    AND date >= DATE_SUB(NEW.schedule_date, INTERVAL 6 MONTH)
  ) THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Employee has not been vaccinated for COVID-19.';
  END IF;
END;

  CONSTRAINT check_future_schedule 
  CHECK (
    schedule_date >= CURDATE() AND schedule_date <= DATE_ADD(CURDATE(), INTERVAL 4 WEEK)
  )
);
